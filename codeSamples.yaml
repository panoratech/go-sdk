overlay: 1.0.0
info:
  title: CodeSamples overlay for go target
  version: 0.0.0
actions:
  - target: $["paths"]["/accounting/items/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingItem
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Items.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingItemOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/folders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveFilestorageFolder
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Folders.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFolderOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/deals"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createCrmDeal
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedCrmDealInput := components.UnifiedCrmDealInput{
                    Name: "<value>",
                    Description: "Multi-tiered human-resource model",
                    Amount: 8592.13,
                    FieldMappings: components.UnifiedCrmDealInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Crm.Deals.Create(ctx, xConnectionToken, unifiedCrmDealInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmDealOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/expenses"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingExpense
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Expenses.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/items"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingItem
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Items.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCrmUser
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Users.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmUserOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/locations"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisLocation
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Locations.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccountingAttachment
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedAccountingAttachmentInput := components.UnifiedAccountingAttachmentInput{}
                ctx := context.Background()
                res, err := s.Accounting.Attachments.Create(ctx, xConnectionToken, unifiedAccountingAttachmentInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAttachmentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/purchaseorders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingPurchaseOrder
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Purchaseorders.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPurchaseorderOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/invoices"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccountingInvoice
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedAccountingInvoiceInput := components.UnifiedAccountingInvoiceInput{}
                ctx := context.Background()
                res, err := s.Accounting.Invoices.Create(ctx, xConnectionToken, unifiedAccountingInvoiceInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingInvoiceOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/users"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listCrmUsers
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Users.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/field_mappings"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: defineCustomField
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                request := components.CustomFieldCreateDto{
                    ObjectTypeOwner: "<value>",
                    Name: "<value>",
                    Description: "Balanced multimedia policy",
                    DataType: "point",
                    SourceCustomFieldID: "<value>",
                    SourceProvider: "<value>",
                    LinkedUserID: "<value>",
                }
                ctx := context.Background()
                res, err := s.FieldMappings.DefineCustomField(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/actions"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingautomationAction
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Actions.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/events/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingautomationEvent
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Events.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationEventOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/lists/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingautomationList
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Lists.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationListOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/tags"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingTags
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Tags.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingAutomationUser
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Users.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationUserOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/scorecards/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsScorecard
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Scorecards.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsScorecardOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/timeoffbalances/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisTimeoffbalance
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Timeoffbalances.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisTimeoffbalanceOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/jobinterviewstages"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsJobInterviewStage
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Jobinterviewstages.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/tags"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsTags
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Tags.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/automations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingautomationAutomation
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Automations.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationAutomationOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingAttachments
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Attachments.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingContacts
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Contacts.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: hello
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )

                ctx := context.Background()
                res, err := s.Hello(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/employments"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisEmployment
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Employments.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/automations"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingautomationAutomation
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Automations.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/companies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCrmCompany
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Companies.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmCompanyOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisGroup
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Groups.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisGroupOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/templates"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingautomationTemplates
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Templates.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/companyinfos/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingCompanyInfo
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Companyinfos.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingCompanyinfoOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingAccount
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Accounts.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/linked_users"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listLinkedUsers
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )

                ctx := context.Background()
                res, err := s.LinkedUsers.List(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/activities"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAtsActivity
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedAtsActivityInput := components.UnifiedAtsActivityInput{
                    FieldMappings: components.UnifiedAtsActivityInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Ats.Activities.Create(ctx, xConnectionToken, unifiedAtsActivityInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsActivityOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/cashflowstatements"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingCashflowStatement
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Cashflowstatements.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/teams/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveTicketingTeam
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Teams.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTeamOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccountingContact
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedAccountingContactInput := components.UnifiedAccountingContactInput{}
                ctx := context.Background()
                res, err := s.Accounting.Contacts.Create(ctx, xConnectionToken, unifiedAccountingContactInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingContactOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/incomestatements"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingIncomeStatement
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Incomestatements.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/payments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingPayment
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Payments.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPaymentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/expenses/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingExpense
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Expenses.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingExpenseOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/notes/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCrmNote
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Notes.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmNoteOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/accounts"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccountingAccount
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedAccountingAccountInput := components.UnifiedAccountingAccountInput{}
                ctx := context.Background()
                res, err := s.Accounting.Accounts.Create(ctx, xConnectionToken, unifiedAccountingAccountInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAccountOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingAttachment
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Attachments.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAttachmentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveTicketingAccount
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Accounts.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingAccountOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/tasks"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createCrmTask
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedCrmTaskInput := components.UnifiedCrmTaskInput{
                    Subject: "<value>",
                    Content: "<value>",
                    Status: "<value>",
                    FieldMappings: components.UnifiedCrmTaskInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Crm.Tasks.Create(ctx, xConnectionToken, unifiedCrmTaskInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmTaskOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/folders"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createFilestorageFolder
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var remoteData bool = false

                unifiedFilestorageFolderInput := components.UnifiedFilestorageFolderInput{
                    Name: "<value>",
                    Size: "<value>",
                    FolderURL: "<value>",
                    Description: "Multi-tiered human-resource model",
                    DriveID: "<value>",
                    ParentFolderID: "<value>",
                    SharedLink: "<value>",
                    Permission: "<value>",
                    FieldMappings: components.UnifiedFilestorageFolderInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Filestorage.Folders.Create(ctx, xConnectionToken, remoteData, unifiedFilestorageFolderInput)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFolderOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingAccount
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Accounts.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAccountOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/dependents"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisDependents
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Dependents.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/tags/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsTag
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Tags.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsTagOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/drives"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listFilestorageDrives
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Drives.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/engagements"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listCrmEngagements
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Engagements.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/employeepayrollruns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisEmployeePayrollRun
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Employeepayrollruns.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmployeepayrollrunOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/tags/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveTicketingTag
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Tags.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTagOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/webhooks/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: delete
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Webhooks.{id}.Delete(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/comments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveTicketingComment
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Comments.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/employments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisEmployment
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Employments.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmploymentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/activities"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsActivity
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Activities.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/applications/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsApplication
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Applications.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsApplicationOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveTicketingContact
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Contacts.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/rejectreasons"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsRejectReasons
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Rejectreasons.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/companies"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listCrmCompany
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Companies.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/tasks"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listCrmTask
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Tasks.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/scorecards"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsScorecard
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Scorecards.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/employerbenefits"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisEmployerBenefit
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Employerbenefits.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/timeoffbalances"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisTimeoffbalance
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Timeoffbalances.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/applications"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAtsApplication
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedAtsApplicationInput := components.UnifiedAtsApplicationInput{
                    FieldMappings: components.UnifiedAtsApplicationInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Ats.Applications.Create(ctx, xConnectionToken, unifiedAtsApplicationInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsApplicationOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/offers"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsOffer
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Offers.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/files"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listFilestorageFile
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Files.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveFilestorageGroup
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Groups.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageGroupOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/employerbenefits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisEmployerBenefit
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Employerbenefits.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmployerbenefitOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/emails"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingautomationEmails
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Emails.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/departments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsDepartment
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Departments.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsDepartmentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/invoices/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingInvoice
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Invoices.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingInvoiceOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/sync/status/{vertical}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: status
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var vertical string = "<value>"
                ctx := context.Background()
                res, err := s.Sync.Status(ctx, vertical)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/notes"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createCrmNote
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedCrmNoteInput := components.UnifiedCrmNoteInput{
                    Content: "<value>",
                    FieldMappings: components.UnifiedCrmNoteInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Crm.Notes.Create(ctx, xConnectionToken, unifiedCrmNoteInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmNoteOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/journalentries"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingJournalEntry
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Journalentries.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/journalentries/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingJournalEntry
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Journalentries.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingJournalentryOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/balancesheets"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingBalanceSheets
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Balancesheets.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/journalentries"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccountingJournalEntry
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedAccountingJournalentryInput := components.UnifiedAccountingJournalentryInput{}
                ctx := context.Background()
                res, err := s.Accounting.Journalentries.Create(ctx, xConnectionToken, unifiedAccountingJournalentryInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingJournalentryOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/campaigns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingautomationCampaign
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Campaigns.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCampaignOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/templates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingautomationTemplate
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Templates.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationTemplateOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/creditnotes/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingCreditNote
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Creditnotes.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingCreditnoteOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/incomestatements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingIncomeStatement
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Incomestatements.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingIncomestatementOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCrmContact
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Contacts.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmContactOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/lists"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingautomationLists
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Lists.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/timeoffs"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisTimeoffs
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Timeoffs.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/lists"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createMarketingautomationList
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationListInput := components.UnifiedMarketingautomationListInput{}
                ctx := context.Background()
                res, err := s.Marketingautomation.Lists.Create(ctx, xConnectionToken, unifiedMarketingautomationListInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationListOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/rejectreasons/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsRejectReason
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Rejectreasons.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsRejectreasonOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/tickets"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createTicketingTicket
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedTicketingTicketInput := components.UnifiedTicketingTicketInput{
                    Name: "<value>",
                    Description: "Multi-tiered human-resource model",
                    FieldMappings: components.UnifiedTicketingTicketInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Ticketing.Tickets.Create(ctx, xConnectionToken, unifiedTicketingTicketInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTicketOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/users"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingUsers
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Users.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/employees"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createHrisEmployee
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedHrisEmployeeInput := components.UnifiedHrisEmployeeInput{}
                ctx := context.Background()
                res, err := s.Hris.Employees.Create(ctx, xConnectionToken, unifiedHrisEmployeeInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmployeeOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsAttachment
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Attachments.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/candidates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsCandidate
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Candidates.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsCandidateOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/teams"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingTeams
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Teams.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/bankinfos/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisBankinfo
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Bankinfos.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisBankinfoOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/addresses"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingAddress
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Addresses.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/users"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listFilestorageUsers
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Users.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/employees/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisEmployee
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Employees.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisEmployeeOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/jobs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsJob
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Jobs.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsJobOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/offices/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsOffice
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Offices.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsOfficeOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/webhooks/{id}"]["put"]
    update:
      x-codeSamples:
        - lang: go
          label: updateStatus
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Webhooks.{id}.UpdateStatus(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/comments"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingComments
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Comments.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/jobs"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsJob
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Jobs.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/purchaseorders"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccountingPurchaseOrder
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedAccountingPurchaseorderInput := components.UnifiedAccountingPurchaseorderInput{}
                ctx := context.Background()
                res, err := s.Accounting.Purchaseorders.Create(ctx, xConnectionToken, unifiedAccountingPurchaseorderInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPurchaseorderOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/groups"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listFilestorageGroup
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Groups.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createCrmContact
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedCrmContactInput := components.UnifiedCrmContactInput{
                    FirstName: "Jed",
                    LastName: "Kuhn",
                    FieldMappings: components.UnifiedCrmContactInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Crm.Contacts.Create(ctx, xConnectionToken, unifiedCrmContactInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmContactOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/groups"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisGroup
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Groups.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/timeoffs"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createHrisTimeoff
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedHrisTimeoffInput := components.UnifiedHrisTimeoffInput{}
                ctx := context.Background()
                res, err := s.Hris.Timeoffs.Create(ctx, xConnectionToken, unifiedHrisTimeoffInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisTimeoffOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/cashflowstatements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingCashflowStatement
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Cashflowstatements.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingCashflowstatementOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/purchaseorders"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingPurchaseOrder
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Purchaseorders.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/companies"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createCrmCompany
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedCrmCompanyInput := components.UnifiedCrmCompanyInput{
                    Name: "<value>",
                    FieldMappings: components.UnifiedCrmCompanyInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Crm.Companies.Create(ctx, xConnectionToken, unifiedCrmCompanyInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmCompanyOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/payrollruns"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisPayrollRuns
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Payrollruns.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/actions"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createMarketingautomationAction
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationActionInput := components.UnifiedMarketingautomationActionInput{}
                ctx := context.Background()
                res, err := s.Marketingautomation.Actions.Create(ctx, xConnectionToken, unifiedMarketingautomationActionInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationActionOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/users"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsUsers
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Users.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/companyinfos"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingCompanyInfos
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Companyinfos.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/bankinfos"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisBankinfo
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Bankinfos.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingAutomationContact
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Contacts.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationContactOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/health"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: health
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )

                ctx := context.Background()
                res, err := s.Health(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/candidates"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsCandidate
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Candidates.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/deals"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listCrmDeals
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Deals.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/field_mappings/map"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: map
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                request := components.MapFieldToProviderDto{
                    AttributeID: "<value>",
                    SourceCustomFieldID: "<value>",
                    SourceProvider: "<value>",
                    LinkedUserID: "<value>",
                }
                ctx := context.Background()
                res, err := s.FieldMappings.Map.Map(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/payments"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingPayment
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Payments.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/vendorcredits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingVendorCredit
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Vendorcredits.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingVendorcreditOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/linked_users/batch"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: importBatch
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                request := components.CreateBatchLinkedUserDto{
                    LinkedUserOriginIds: []string{
                        "<value>",
                    },
                    Alias: "<value>",
                }
                ctx := context.Background()
                res, err := s.LinkedUsers.Batch.ImportBatch(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/invoices"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingInvoice
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Invoices.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/campaigns"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createMarketingautomationCampaign
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationCampaignInput := components.UnifiedMarketingautomationCampaignInput{}
                ctx := context.Background()
                res, err := s.Marketingautomation.Campaigns.Create(ctx, xConnectionToken, unifiedMarketingautomationCampaignInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCampaignOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/webhooks"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createWebhookPublic
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                request := components.WebhookDto{
                    URL: "http://limp-pastry.org",
                    Description: "Inverse discrete benchmark",
                    Scope: []string{
                        "<value>",
                    },
                }
                ctx := context.Background()
                res, err := s.Webhooks.Create(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingAttachments
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Attachments.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/transactions/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingTransaction
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Transactions.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingTransactionOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveFilestorageUser
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Users.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedUserOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/offices"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsOffice
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Offices.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/balancesheets/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingBalanceSheet
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Balancesheets.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingBalancesheetOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/transactions"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingTransaction
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Transactions.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/linked_users/single"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveLinkedUser
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var id string = "<value>"
                ctx := context.Background()
                res, err := s.LinkedUsers.Single.Retrieve(ctx, id)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/paygroups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisPaygroup
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Paygroups.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisPaygroupOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/emails/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingautomationEmail
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Emails.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationEmailOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/messages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingautomationMessage
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Messages.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationMessageOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/candidates"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAtsCandidate
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedAtsCandidateInput := components.UnifiedAtsCandidateInput{
                    FieldMappings: components.UnifiedAtsCandidateInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Ats.Candidates.Create(ctx, xConnectionToken, unifiedAtsCandidateInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsCandidateOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveTicketingAttachment
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Attachments.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingAttachmentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/trackingcategories"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingTrackingCategorys
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Trackingcategories.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createMarketingAutomationContact
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationContactInput := components.UnifiedMarketingautomationContactInput{}
                ctx := context.Background()
                res, err := s.Marketingautomation.Contacts.Create(ctx, xConnectionToken, unifiedMarketingautomationContactInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationContactOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsAttachment
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Attachments.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsAttachmentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/interviews/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsInterview
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Interviews.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsInterviewOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/tickets"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingTicket
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Tickets.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/passthrough"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: request
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var integrationID string = "<value>"

                var linkedUserID string = "<value>"

                var vertical string = "<value>"

                passThroughRequestDto := components.PassThroughRequestDto{
                    Method: components.MethodGet,
                    Path: "/dev",
                }
                ctx := context.Background()
                res, err := s.Passthrough.Request(ctx, integrationID, linkedUserID, vertical, passThroughRequestDto)
                if err != nil {
                    log.Fatal(err)
                }
                if res.PassThroughResponse != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/drives/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveFilestorageDrive
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Drives.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageDriveOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/engagements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCrmEngagement
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Engagements.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmEngagementOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/interviews"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsInterview
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Interviews.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createTicketingAttachment
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedTicketingAttachmentInput := components.UnifiedTicketingAttachmentInput{
                    FileName: "your_file_here",
                    FileURL: "<value>",
                    Uploader: "<value>",
                    FieldMappings: components.UnifiedTicketingAttachmentInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Ticketing.Attachments.Create(ctx, xConnectionToken, unifiedTicketingAttachmentInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingAttachmentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/sync/resync"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: resync
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )

                ctx := context.Background()
                res, err := s.Sync.Resync(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingAccounts
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Accounts.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/taxrates"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingTaxRate
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Taxrates.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/tickets/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveTicketingTicket
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Tickets.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingTicketOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/dependents/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisDependent
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Dependents.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisDependentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/actions/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveMarketingautomationAction
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Actions.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationActionOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/collections/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCollection
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Collections.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingCollectionOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/addresses/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingAddress
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Addresses.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingAddressOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/files/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveFilestorageFile
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Files.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFileOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/trackingcategories/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingTrackingCategory
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Trackingcategories.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingTrackingcategoryOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/stages"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listCrmStages
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Stages.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/linked_users"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createLinkedUser
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                request := components.CreateLinkedUserDto{
                    LinkedUserOriginID: "<value>",
                    Alias: "<value>",
                }
                ctx := context.Background()
                res, err := s.LinkedUsers.Create(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/companies"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisCompanys
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Companies.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/timeoffs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisTimeoff
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Timeoffs.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisTimeoffOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/events"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingAutomationEvents
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Events.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsUser
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Users.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsUserOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingContacts
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Contacts.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/collections"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTicketingCollections
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Collections.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/creditnotes"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingCreditNote
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Creditnotes.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/vendorcredits"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingVendorCredit
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Vendorcredits.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/expenses"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccountingExpense
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedAccountingExpenseInput := components.UnifiedAccountingExpenseInput{}
                ctx := context.Background()
                res, err := s.Accounting.Expenses.Create(ctx, xConnectionToken, unifiedAccountingExpenseInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingExpenseOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/phonenumbers"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccountingPhonenumber
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Phonenumbers.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/benefits"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisBenefit
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Benefits.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/campaigns"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingautomationCampaign
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Campaigns.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/files"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createFilestorageFile
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var remoteData bool = false

                unifiedFilestorageFileInput := components.UnifiedFilestorageFileInput{
                    Name: "<value>",
                    FileURL: "<value>",
                    MimeType: "<value>",
                    Size: "<value>",
                    FolderID: "<value>",
                    Permission: "<value>",
                    SharedLink: "<value>",
                    FieldMappings: components.UnifiedFilestorageFileInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Filestorage.Files.Create(ctx, xConnectionToken, remoteData, unifiedFilestorageFileInput)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedFilestorageFileOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/engagements"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createCrmEngagement
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedCrmEngagementInput := components.UnifiedCrmEngagementInput{
                    Type: "<value>",
                    FieldMappings: components.UnifiedCrmEngagementInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Crm.Engagements.Create(ctx, xConnectionToken, unifiedCrmEngagementInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmEngagementOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/field_mappings/define"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: definitions
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                request := components.DefineTargetFieldDto{
                    ObjectTypeOwner: "<value>",
                    Name: "<value>",
                    Description: "Universal heuristic matrices",
                    DataType: "decimal",
                }
                ctx := context.Background()
                res, err := s.FieldMappings.Define.Definitions(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/employeepayrollruns"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisEmployeePayrollRun
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Employeepayrollruns.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingContact
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Contacts.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingContactOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/deals/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCrmDeal
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Deals.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmDealOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/jobinterviewstages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsJobInterviewStage
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Jobinterviewstages.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsJobinterviewstageOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/stages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCrmStage
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Stages.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmStageOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/payments"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccountingPayment
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedAccountingPaymentInput := components.UnifiedAccountingPaymentInput{}
                ctx := context.Background()
                res, err := s.Accounting.Payments.Create(ctx, xConnectionToken, unifiedAccountingPaymentInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPaymentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveTicketingUser
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ticketing.Users.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingUserOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/notes"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listCrmNote
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Notes.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/employees"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisEmployee
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Employees.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/filestorage/folders"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listFilestorageFolder
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Filestorage.Folders.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/webhooks"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listWebhooks
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )

                ctx := context.Background()
                res, err := s.Webhooks.List(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.WebhookResponses != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/departments"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsDepartments
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Departments.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/eeocs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsEeocs
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Eeocs.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsEeocsOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/tasks/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveCrmTask
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Tasks.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedCrmTaskOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/webhooks/verifyEvent"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: verifyEvent
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                request := components.SignatureVerificationDto{
                    Payload: components.Payload{},
                    Signature: "<value>",
                    Secret: "<value>",
                }
                ctx := context.Background()
                res, err := s.Webhooks.Verifyevent.VerifyEvent(ctx, request)
                if err != nil {
                    log.Fatal(err)
                }
                if res.EventPayload != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/applications"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsApplication
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Applications.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ticketing/comments"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createTicketingComment
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedTicketingCommentInput := components.UnifiedTicketingCommentInput{
                    Body: "<value>",
                }
                ctx := context.Background()
                res, err := s.Ticketing.Comments.Create(ctx, xConnectionToken, unifiedTicketingCommentInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedTicketingCommentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingAutomationContacts
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Contacts.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/messages"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingautomationMessages
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Messages.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/users"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listMarketingAutomationUsers
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Marketingautomation.Users.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/linked_users/fromRemoteId"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: remoteId
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var remoteID string = "<value>"
                ctx := context.Background()
                res, err := s.LinkedUsers.Fromremoteid.RemoteID(ctx, remoteID)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAtsAttachment
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedAtsAttachmentInput := components.UnifiedAtsAttachmentInput{
                    FieldMappings: components.UnifiedAtsAttachmentInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Ats.Attachments.Create(ctx, xConnectionToken, unifiedAtsAttachmentInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsAttachmentOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/taxrates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingTaxRate
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Taxrates.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingTaxrateOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/paygroups"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listHrisPaygroup
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Paygroups.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/locations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisLocation
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Locations.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisLocationOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/offers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsOffer
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Offers.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsOfferOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hris/benefits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveHrisBenefit
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Hris.Benefits.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedHrisBenefitOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/crm/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listCrmContacts
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Crm.Contacts.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/activities/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAtsActivity
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Activities.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsActivityOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/automations"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createMarketingautomationAutomation
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationAutomationInput := components.UnifiedMarketingautomationAutomationInput{}
                ctx := context.Background()
                res, err := s.Marketingautomation.Automations.Create(ctx, xConnectionToken, unifiedMarketingautomationAutomationInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationAutomationOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/interviews"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAtsInterview
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedAtsInterviewInput := components.UnifiedAtsInterviewInput{
                    FieldMappings: components.UnifiedAtsInterviewInputFieldMappings{},
                }
                ctx := context.Background()
                res, err := s.Ats.Interviews.Create(ctx, xConnectionToken, unifiedAtsInterviewInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAtsInterviewOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/marketingautomation/templates"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createMarketingautomationTemplate
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"github.com/panoratech/go-sdk/models/components"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                unifiedMarketingautomationTemplateInput := components.UnifiedMarketingautomationTemplateInput{}
                ctx := context.Background()
                res, err := s.Marketingautomation.Templates.Create(ctx, xConnectionToken, unifiedMarketingautomationTemplateInput, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedMarketingautomationTemplateOutput != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/ats/eeocs"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAtsEeocs
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"
                ctx := context.Background()
                res, err := s.Ats.Eeocs.List(ctx, xConnectionToken, nil, nil, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/accounting/phonenumbers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: retrieveAccountingPhonenumber
          source: |-
            package main

            import(
            	"os"
            	gosdk "github.com/panoratech/go-sdk"
            	"context"
            	"log"
            )

            func main() {
                s := gosdk.New(
                    gosdk.WithSecurity(os.Getenv("BEARER")),
                )
                var xConnectionToken string = "<value>"

                var id string = "<value>"
                ctx := context.Background()
                res, err := s.Accounting.Phonenumbers.Retrieve(ctx, xConnectionToken, id, nil)
                if err != nil {
                    log.Fatal(err)
                }
                if res.UnifiedAccountingPhonenumberOutput != nil {
                    // handle response
                }
            }
